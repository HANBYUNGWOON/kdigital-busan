	// 번호범위별로 1등 당첨에 포함된 횟수 조회
	int[] selectStatsBySection(int weeks, int range);
	
	//	@Override
//	public int[] selectStatsBySection(int weeks, int range) {
//		
//		Connection conn = null;				// 연결 객체의 참조를 저장할 변수
//		PreparedStatement pstmt = null;		// 명령 객체의 참조를 저장할 변수
//		ResultSet rs = null;				// 조회 결과의 참조를 저장할 변수
//		int[] countBySection = new int[(int)Math.ceil(45. / range)];	// 번호별 당첨 횟수를 저장할 배열
//		
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			
//			conn = DriverManager.getConnection(
//					"jdbc:mysql://localhost:3306/demoweb",	// 사용할 데이터베이스 연결 정보 
//					"kdigital", "mysql");					// 데이터베이스 사용자 계정
//		
//			String sql = "SELECT (";
//			for (int i = 1; i <= 6; i++) {
//				if (i > 1) {
//					sql += " + ";
//				}
//				sql += "(SELECT COUNT(*) " +
//						 "FROM WINNING_NUMBERS " +
//						 String.format("WHERE (RND > (SELECT COUNT(RND) - ? FROM WINNING_NUMBERS)) AND (NO%d BETWEEN ? AND ?))", i);
//			}
//			
//			sql += "+ (SELECT COUNT(*) " +
//					 "FROM WINNING_NUMBERS " +
//					 "WHERE (RND > (SELECT COUNT(RND) - ? FROM WINNING_NUMBERS)) AND (BNO BETWEEN ? AND ?))";
//			
//			sql += ")";
//						 
//			System.out.println(sql);
//			
//			pstmt = conn.prepareStatement(sql);
//			
//			for (int no = 0; no < (int)Math.ceil(45. / range); no++) { 
//				pstmt.clearParameters();// 앞에서 지정한 파라미터 값 제거
//
//				for (int i = 1; i <= 21; i += 3) { // SQL의 ?를 채우기 위한 반복문
//					pstmt.setInt(i, weeks);
//					pstmt.setInt(i+1, no * range + 1);
//					pstmt.setInt(i+2, no * range + range);
//					System.out.println((no * range + 1) + " / " + (no * range + range));
//				}
//				
//				rs = pstmt.executeQuery();
//				rs.next();// 무조건 결과가 1개 있는 조회이기 때문에 if 또는 while 을 사용하지 않았습니다
//				int count = rs.getInt(1);
//				System.out.println(count);
//				countBySection[no] = count;
//				rs.close();
//			}
//			
//		} catch (Exception ex) {
//			ex.printStackTrace();
//		} finally {
//			try { rs.close(); } catch (Exception ex) {}
//			try { pstmt.close(); } catch (Exception ex) {}
//			try { conn.close(); } catch (Exception ex) {}
//		}
//		
//		return countBySection;
//	}
	
	@Override
	public int[] selectStatsBySection(int weeks, int range) {
		
		Connection conn = null;				// 연결 객체의 참조를 저장할 변수
		PreparedStatement pstmt = null;		// 명령 객체의 참조를 저장할 변수
		ResultSet rs = null;				// 조회 결과의 참조를 저장할 변수
		int[] countBySection = new int[(int)Math.ceil(45. / range)];	// 번호별 당첨 횟수를 저장할 배열
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/demoweb",	// 사용할 데이터베이스 연결 정보 
					"kdigital", "mysql");					// 데이터베이스 사용자 계정
			
			String[] columns = { "NO1", "NO2",  "NO3",  "NO4",  "NO5",  "NO6",  "BNO" };
			for (int no = 0; no < (int)Math.ceil(45. / range); no++) {
				
				int count = 0;
				for (int i = 0; i < columns.length; i++) {
					String sql = "SELECT COUNT(*) " +
							 	 "FROM WINNING_NUMBERS " +
							 	 String.format("WHERE (RND > (SELECT COUNT(RND) - ? FROM WINNING_NUMBERS)) AND (%s BETWEEN ? AND ?)", columns[i]);
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, weeks);
					pstmt.setInt(2, no * range + 1);
					pstmt.setInt(3, no * range + range);
					rs = pstmt.executeQuery();
					rs.next();// 무조건 결과가 1개 있는 조회이기 때문에 if 또는 while 을 사용하지 않았습니다
					count += rs.getInt(1);
					
					rs.close();
					pstmt.close();
				}
				countBySection[no] = count;
				
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try { rs.close(); } catch (Exception ex) {}
			try { pstmt.close(); } catch (Exception ex) {}
			try { conn.close(); } catch (Exception ex) {}
		}
		
		return countBySection;
	}
	
	///////////////////////////////////////////////////////////////////
	
	int[] loadStatsBySection(int weeks, int range);
	
	@Override
	public int[] loadStatsBySection(int weeks, int range) {
		int[] countBySection = lottoDao.selectStatsBySection(weeks, range);
		return countBySection;
	}
	
	/////////////////////////////////////////////////////////////////
	
	@RequestMapping(path = { "/stats-by-section.action" })
	public String statsBySection(@RequestParam(defaultValue = "10") int range, 
								@RequestParam(defaultValue = "5") int weeks,
								Model model) {
		
		int[] countBySection = lottoService.loadStatsBySection(weeks, range);
		model.addAttribute("countBySection", countBySection);
		model.addAttribute("range", range);
		model.addAttribute("weeks", weeks);
		
		return "lotto/stats-by-section";
		
	}
	
	
	